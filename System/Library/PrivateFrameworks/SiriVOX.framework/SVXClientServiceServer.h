/*
                       * This header is generated by classdump-dyld 1.5
                       * on Friday, January 1, 2021 at 5:16:54 AM Mountain Standard Time
                       * Operating System: Version 14.3 (Build 18K561)
                       * Image Source: /System/Library/PrivateFrameworks/SiriVOX.framework/SiriVOX
                       * classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos. Updated by Kevin Bradley.
                       */

#import <libobjc.A.dylib/SVXClientServiceServerConnectionDelegate.h>
#import <libobjc.A.dylib/SVXModuleInstance.h>
#import <libobjc.A.dylib/SVXSessionActivationListening.h>
#import <libobjc.A.dylib/SVXAudioPowerUpdateListening.h>
#import <libobjc.A.dylib/SVXSessionActivityListening.h>
#import <libobjc.A.dylib/NSXPCListenerDelegate.h>
#import <libobjc.A.dylib/SVXClientService.h>

@class SVXModule, NSXPCListener, NSMutableSet, SVXDeviceSetupManager, SVXSessionManager, SVXSpeechSynthesizer, NSString;

@interface SVXClientServiceServer : NSObject <SVXClientServiceServerConnectionDelegate, SVXModuleInstance, SVXSessionActivationListening, SVXAudioPowerUpdateListening, SVXSessionActivityListening, NSXPCListenerDelegate, SVXClientService> {

	SVXModule* _module;
	NSXPCListener* _listener;
	NSMutableSet* _connections;
	SVXDeviceSetupManager* _deviceSetupManager;
	SVXSessionManager* _sessionManager;
	SVXSpeechSynthesizer* _speechSynthesizer;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)dealloc;
-(BOOL)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2 ;
-(void)_removeConnection:(id)arg1 ;
-(void)_addConnection:(id)arg1 ;
-(id)initWithModule:(id)arg1 ;
-(oneway void)pingWithReply:(/*^block*/id)arg1 ;
-(oneway void)synthesizeRequest:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)startWithModuleInstanceProvider:(id)arg1 platformDependencies:(id)arg2 ;
-(void)stopWithModuleInstanceProvider:(id)arg1 ;
-(oneway void)fetchSessionStateWithCompletion:(/*^block*/id)arg1 ;
-(oneway void)deactivateWithContext:(id)arg1 completion:(/*^block*/id)arg2 ;
-(oneway void)fetchSessionActivityStateWithCompletion:(/*^block*/id)arg1 ;
-(void)audioPowerWillBeginUpdateForType:(long long)arg1 wrapper:(id)arg2 ;
-(void)audioPowerDidEndUpdateForType:(long long)arg1 ;
-(void)sessionWillChangeFromState:(long long)arg1 toState:(long long)arg2 ;
-(void)sessionDidChangeFromState:(long long)arg1 toState:(long long)arg2 ;
-(void)sessionWillPresentFeedbackWithDialogIdentifier:(id)arg1 ;
-(void)sessionWillStartSoundWithID:(long long)arg1 ;
-(void)sessionDidStartSoundWithID:(long long)arg1 ;
-(void)sessionDidStopSoundWithID:(long long)arg1 error:(id)arg2 ;
-(void)sessionWillBecomeActiveWithActivationContext:(id)arg1 ;
-(void)sessionDidBecomeActiveWithActivationContext:(id)arg1 ;
-(void)sessionWillResignActiveWithOptions:(unsigned long long)arg1 duration:(double)arg2 ;
-(void)sessionDidResignActiveWithDeactivationContext:(id)arg1 ;
-(void)audioSessionWillBecomeActive:(BOOL)arg1 activationContext:(id)arg2 deactivationContext:(id)arg3 ;
-(void)audioSessionDidBecomeActive:(BOOL)arg1 activationContext:(id)arg2 deactivationContext:(id)arg3 ;
-(oneway void)preheatWithActivationSource:(long long)arg1 ;
-(oneway void)prewarmWithContext:(id)arg1 completion:(/*^block*/id)arg2 ;
-(oneway void)activateWithContext:(id)arg1 completion:(/*^block*/id)arg2 ;
-(oneway void)performManualEndpointing;
-(oneway void)transitToAutomaticEndpointing;
-(oneway void)fetchAudioPowerWithType:(long long)arg1 completion:(/*^block*/id)arg2 ;
-(oneway void)prewarmRequest:(id)arg1 ;
-(oneway void)enqueueSpeechSynthesisRequest:(id)arg1 completion:(/*^block*/id)arg2 ;
-(oneway void)cancelPendingSpeechSynthesisRequest:(id)arg1 ;
-(oneway void)stopSpeechSynthesisRequest:(id)arg1 ;
-(oneway void)setDeviceSetupContext:(id)arg1 ;
-(oneway void)prepareForDeviceSetupWithContext:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)clientServiceServerConnectionWasDisconnected:(id)arg1 ;
-(void)sessionManager:(id)arg1 willActivateWithContext:(id)arg2 ;
-(void)sessionManager:(id)arg1 didActivateWithContext:(id)arg2 ;
-(void)sessionManager:(id)arg1 didNotActivateWithContext:(id)arg2 error:(id)arg3 ;
-(void)sessionManager:(id)arg1 willDeactivateWithContext:(id)arg2 ;
-(void)sessionManager:(id)arg1 didDeactivateWithContext:(id)arg2 ;
-(void)_removeAllConnections;
-(void)_updateDeviceSetupContext;
@end

