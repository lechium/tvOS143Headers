//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "IDSDAccountRegistrationListener-Protocol.h"

@class IDSRealTimeEncryptionIdentity, NSMutableDictionary, NSString, NSTimer;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface IDSRealTimeEncryptionController : NSObject <IDSDAccountRegistrationListener>
{
    NSObject<OS_dispatch_queue> *_realtimeEncryptionQueue;	// 8 = 0x8
    _Bool _isInternal;	// 16 = 0x10
    struct os_unfair_lock_s _lock;	// 20 = 0x14
    _Bool _shouldBroadcastAllValidMkMs;	// 24 = 0x18
    double _mkmAcknowledgementTimeout;	// 32 = 0x20
    double _preKeyRequestDelayDuration;	// 40 = 0x28
    unsigned int _prekeyExpireDuration;	// 48 = 0x30
    unsigned int _previousPrekeyExpireDuration;	// 52 = 0x34
    unsigned int _mkmExpireDuration;	// 56 = 0x38
    unsigned int _mkmRollDuration;	// 60 = 0x3c
    unsigned char _MKMRecoveryRetryCount;	// 64 = 0x40
    _Bool _isMKMRecoveryRunning;	// 65 = 0x41
    _Bool _isDeferredPrekeyRequestPending;	// 66 = 0x42
    CDUnknownBlockType _initialKeyMaterialDistributionTimeoutBlock;	// 72 = 0x48
    NSObject<OS_dispatch_source> *_mkmRollTimer;	// 80 = 0x50
    NSObject<OS_dispatch_source> *_mkmExpirationTimer;	// 88 = 0x58
    CDUnknownBlockType _mkmRollBlock;	// 96 = 0x60
    CDUnknownBlockType _mkmExpirationBlock;	// 104 = 0x68
    NSMutableDictionary *_accountIDs;	// 112 = 0x70
    NSMutableDictionary *_fromIDs;	// 120 = 0x78
    IDSRealTimeEncryptionIdentity *_identityForDevice;	// 128 = 0x80
    IDSRealTimeEncryptionIdentity *_previousIdentityForDevice;	// 136 = 0x88
    NSMutableDictionary *_prekeyAckCountForGroup;	// 144 = 0x90
    NSMutableDictionary *_publicKeyForDevice;	// 152 = 0x98
    NSMutableDictionary *_groupIDToKeyMaterialCache;	// 160 = 0xa0
    NSMutableDictionary *_membersForGroup;	// 168 = 0xa8
    NSMutableDictionary *_participantsForGroup;	// 176 = 0xb0
    NSMutableDictionary *_participantsInfoForGroup;	// 184 = 0xb8
    NSMutableDictionary *_participantsWaitingForKeyMaterials;	// 192 = 0xc0
    NSMutableDictionary *_participantsWaitingForInitialKeyMaterials;	// 200 = 0xc8
    NSMutableDictionary *_endpointSubscriptionForGroup;	// 208 = 0xd0
    NSMutableDictionary *_lastKnownGroupIDToPushTokens;	// 216 = 0xd8
    NSMutableDictionary *_lastKnownAccountIDToPushTokens;	// 224 = 0xe0
    NSMutableDictionary *_pendingMasterKeyMaterials;	// 232 = 0xe8
    NSTimer *_endpointUpdateTimer;	// 240 = 0xf0
    _Bool _isTestRunning;	// 248 = 0xf8
}

+ (id)sharedInstance;	// IMP=0x00000001004715d4
- (void).cxx_destruct;	// IMP=0x000000010048afa8
@property(nonatomic) _Bool isTestRunning; // @synthesize isTestRunning=_isTestRunning;
- (void)account:(id)arg1 didUpdateRegisteredDevices:(id)arg2;	// IMP=0x000000010048aa8c
- (void)didUpdateParticipants:(id)arg1 forGroup:(id)arg2 sessionID:(id)arg3;	// IMP=0x0000000100489128
- (_Bool)_isValidPushToken:(id)arg1;	// IMP=0x000000010048908c
- (void)didUpdateMembers:(id)arg1 forGroup:(id)arg2 sessionID:(id)arg3;	// IMP=0x0000000100488c7c
- (void)setMembers:(id)arg1 forGroup:(id)arg2 sessionID:(id)arg3;	// IMP=0x0000000100487ee0
- (void)didReceiveEndpointsUpdate:(id)arg1 forGroup:(id)arg2 sessionID:(id)arg3;	// IMP=0x000000010048771c
- (void)rollNewKeysAfterResettingPrekeysForGroups:(id)arg1 withReason:(long long)arg2;	// IMP=0x00000001004870f0
- (void)sendKeyMaterialsToWaitingParticipantsForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x0000000100486a48
- (void)removeExpiredPrekeys;	// IMP=0x0000000100486860
- (void)sendPublicKeyToDestination:(id)arg1 group:(id)arg2 sessionID:(id)arg3;	// IMP=0x0000000100486104
- (void)sendPublicKeyToGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x0000000100485f8c
- (void)_sendMessage:(id)arg1 toDestination:(id)arg2 forGroup:(id)arg3 sessionID:(id)arg4 command:(long long)arg5 timeout:(double)arg6 shouldExpire:(_Bool)arg7 completion:(CDUnknownBlockType)arg8 completionBlock:(CDUnknownBlockType)arg9;	// IMP=0x0000000100485308
- (void)reportTimeDifferenceBetweenFirstPacketAndMKI:(long long)arg1 forMKI:(id)arg2 service:(id)arg3 activeParticipants:(long long)arg4;	// IMP=0x000000010048511c
- (void)unsubscribeEndpointsForGroup:(id)arg1;	// IMP=0x0000000100484f70
- (void)resetKeysForGroup:(id)arg1 shouldRemoveCurrentParticipants:(_Bool)arg2;	// IMP=0x0000000100484b48
- (void)removeActiveParticipant:(id)arg1 forGroup:(id)arg2;	// IMP=0x00000001004845f0
- (void)removeLocalActiveParticipantForGroup:(id)arg1;	// IMP=0x000000010048454c
- (id)activeParticipantsForGroup:(id)arg1;	// IMP=0x0000000100484454
- (void)resetDevicePrekey;	// IMP=0x0000000100484378
- (_Bool)_shouldEnforceRemoteTimeout;	// IMP=0x0000000100484190
- (double)_multiwayFTMessageSendTimeout;	// IMP=0x0000000100483f98
- (void)sendKeyMaterialsToLocal:(id)arg1 sessionID:(id)arg2;	// IMP=0x0000000100483bf0
- (void)_sendKeyMaterialsToGroup:(id)arg1 sessionID:(id)arg2 toSpecificMembers:(id)arg3 shouldIncludeCachedPeerKeyMaterial:(_Bool)arg4;	// IMP=0x0000000100481a48
- (void)resetKeyMaterialLocalSentStatus:(id)arg1;	// IMP=0x000000010048177c
- (id)_protectedCachedKeyMaterialsForDestination:(id)arg1 pushToken:(id)arg2 forGroup:(id)arg3 outURIs:(id *)arg4 includePeers:(_Bool)arg5;	// IMP=0x0000000100480750
- (void)sendPendingKeyMaterialsToGroup:(id)arg1 sessionID:(id)arg2 forDevice:(id)arg3 fromID:(id)arg4;	// IMP=0x000000010048039c
- (id)masterKeyMaterialForGroup:(id)arg1;	// IMP=0x0000000100480128
- (void)noteReceivedGroupMasterKeyMaterials:(id)arg1 URIs:(id)arg2 sessionID:(id)arg3;	// IMP=0x000000010047fd30
- (void)requestPendingKeyMaterialsForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x000000010047f978
- (id)setMasterKeyMaterial:(id)arg1 forDevice:(id)arg2 fromID:(id)arg3 groupID:(id)arg4 sessionID:(id)arg5 fromSender:(_Bool)arg6 error:(id *)arg7;	// IMP=0x000000010047dc00
- (_Bool)_storePendingKeyMaterial:(id)arg1 forDevice:(id)arg2;	// IMP=0x000000010047d8e8
- (void)processIncomingPrekeyRecoveryRequest:(id)arg1 fromDevice:(id)arg2 fromID:(id)arg3 groupID:(id)arg4 sessionID:(id)arg5 serverDate:(id)arg6;	// IMP=0x000000010047d270
- (void)sendMKMRecoveryRequestToParticipants:(id)arg1 senderID:(id)arg2 groupID:(id)arg3 sessionID:(id)arg4;	// IMP=0x000000010047cb60
- (void)sendMKMRecoveryRequestToGroup:(id)arg1;	// IMP=0x000000010047c578
- (void)sendMKMRecoveryRequestToDevice:(id)arg1 fromID:(id)arg2 groupID:(id)arg3 sessionID:(id)arg4;	// IMP=0x000000010047bd68
- (void)createKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x000000010047acc8
- (void)_stopMkmExpirationTimer;	// IMP=0x000000010047ab90
- (void)_startMkmExpirationTimer:(int)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x000000010047a814
- (void)_handleMkmExpirationTimer;	// IMP=0x000000010047a700
- (void)_stopMkmRollTimer;	// IMP=0x000000010047a5c8
- (void)_startMkmRollTimer:(int)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x000000010047a24c
- (void)_handleMkmRollTimer;	// IMP=0x000000010047a124
- (void)cleanUpExpiredMasterKeyMaterial;	// IMP=0x0000000100479838
- (void)sendPrekeyRequestToDestination:(id)arg1 group:(id)arg2 sessionID:(id)arg3;	// IMP=0x0000000100479468
- (void)sendPrekeyRequestToGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x00000001004792f0
- (id)publicKeys;	// IMP=0x0000000100478f80
- (id)realTimeEncryptionPublicKeyDataForDevice:(id)arg1;	// IMP=0x0000000100478d1c
- (void)_locked_updateParticipantsWaitingForKeyMaterialsIfNeededForGroupID:(id)arg1 remoteToken:(id)arg2 previousRemotePublicKey:(id)arg3 newRemotePublicKey:(id)arg4;	// IMP=0x00000001004788f4
- (_Bool)setRealTimeEncryptionPublicKey:(id)arg1 forDevice:(id)arg2 fromID:(id)arg3 groupID:(id)arg4 sessionID:(id)arg5 serverDate:(id)arg6;	// IMP=0x00000001004777d8
- (void)reportPrekeyAckStatus:(id)arg1;	// IMP=0x0000000100477674
- (void)processIncomingPrekeyAckForGroup:(id)arg1;	// IMP=0x000000010047747c
- (id)realTimeEncryptionPublicKeyData;	// IMP=0x0000000100476bf0
- (id)createRealTimeEncryptionFullIdentityForDevice:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;	// IMP=0x0000000100475b18
- (void)_startMKMRecovery;	// IMP=0x00000001004759ec
- (void)_doCheckPendingMasterKeyMaterialsAndSendMKMRecoveryRequest;	// IMP=0x00000001004751bc
- (void)_dispatchRenewPrekeyTimer;	// IMP=0x0000000100474e80
- (void)_sendRenewedPrekeysToGroups;	// IMP=0x0000000100474af0
- (void)_noteKeyMaterialDidSendToDestination:(id)arg1 groupID:(id)arg2 withSuccess:(_Bool)arg3;	// IMP=0x00000001004746b4
- (void)_initializeParticipantsWaitingForInitialKeyMaterialsForGroup:(id)arg1;	// IMP=0x0000000100473fcc
- (id)_pruneInvalidAndLocalPushTokensFromTokens:(id)arg1;	// IMP=0x0000000100473e80
- (void)_requestKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2 toSpecificMembers:(id)arg3 shouldTrackDistribution:(_Bool)arg4 shouldIncludeCachedPeerKeyMaterial:(_Bool)arg5;	// IMP=0x0000000100473844
- (void)reliablyRequestKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x0000000100473790
- (void)requestKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x00000001004736e0
- (void)requestKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2 toSpecificMembers:(id)arg3;	// IMP=0x0000000100473604
- (void)removeAccountForGroup:(id)arg1;	// IMP=0x00000001004731e8
- (void)setAccount:(id)arg1 fromID:(id)arg2 forGroup:(id)arg3;	// IMP=0x0000000100472bd8
- (id)_locked_ensureGroupMasterKeyMaterialCacheForGroup:(id)arg1;	// IMP=0x0000000100472884
- (_Bool)_isUsingAccount:(id)arg1;	// IMP=0x000000010047265c
- (id)_localDevicePushToken;	// IMP=0x00000001004725e8
- (id)init;	// IMP=0x0000000100471780

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

