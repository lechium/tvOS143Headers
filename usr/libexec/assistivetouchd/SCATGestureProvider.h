//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import "SCATElementManager.h"

#import "SCATGestureDrawingViewDelegate-Protocol.h"
#import "SCATGestureFingersElementDelegate-Protocol.h"
#import "SCATMenuCustomGestureItemsViewDelegate-Protocol.h"
#import "SCATMenuFingerItemsViewDelegate-Protocol.h"
#import "SCATMenuFlickItemsViewDelegate-Protocol.h"
#import "SCATMenuGestureConfirmationItemsViewDelegate-Protocol.h"
#import "SCATMenuObserver-Protocol.h"
#import "SCATMenuPanItemsViewDelegate-Protocol.h"
#import "SCATMenuPinchItemsViewDelegate-Protocol.h"
#import "SCATMenuStopContinuousGestureItemViewDelegate-Protocol.h"
#import "SCATPointPickerDelegate-Protocol.h"

@class NSArray, NSMutableArray, NSString, NSTimer, SCATGestureArrowView, SCATGestureDrawingElementManager, SCATGestureFingersElement, SCATMenu, SCATPointPicker;
@protocol SCATElement, SCATGestureProviderDelegate;

@interface SCATGestureProvider : SCATElementManager <SCATMenuObserver, SCATPointPickerDelegate, SCATMenuFlickItemsViewDelegate, SCATMenuFingerItemsViewDelegate, SCATMenuPanItemsViewDelegate, SCATMenuStopContinuousGestureItemViewDelegate, SCATMenuGestureConfirmationItemsViewDelegate, SCATMenuPinchItemsViewDelegate, SCATMenuCustomGestureItemsViewDelegate, SCATGestureDrawingViewDelegate, SCATGestureFingersElementDelegate>
{
    SCATMenu *_menu;	// 8 = 0x8
    NSTimer *_tellMeWhenGestureTimer;	// 16 = 0x10
    SCATPointPicker *_lineGesturePointPicker;	// 24 = 0x18
    SCATGestureDrawingElementManager *_drawingElementManager;	// 32 = 0x20
    NSMutableArray *_continuousGesturePoints;	// 40 = 0x28
    NSMutableArray *_continuousGestureTimes;	// 48 = 0x30
    NSString *_continuousGestureName;	// 56 = 0x38
    _Bool _showsFingers;	// 64 = 0x40
    unsigned long long _numberOfFingersForGestures;	// 72 = 0x48
    _Bool _isReversingContinuousGesture;	// 80 = 0x50
    _Bool _needsScanning;	// 81 = 0x51
    double _currentForce;	// 88 = 0x58
    double _targetForce;	// 96 = 0x60
    double _currentY;	// 104 = 0x68
    long long _currentOrbGestureMode;	// 112 = 0x70
    SCATGestureFingersElement *_elementForFingers;	// 120 = 0x78
    _Bool _hidden;	// 128 = 0x80
    _Bool _isPinching;	// 129 = 0x81
    _Bool _shouldAllowFingersForContinuousGesture;	// 130 = 0x82
    id <SCATGestureProviderDelegate> _delegate;	// 136 = 0x88
    SCATGestureArrowView *_arrowView;	// 144 = 0x90
    SCATElementManager *_currentSwitchController;	// 152 = 0x98
    NSArray *_panFingerPositions;	// 160 = 0xa0
    NSArray *_pinchFingerOriginalPositions;	// 168 = 0xa8
    double _pinchRadius;	// 176 = 0xb0
    double _pinchAngle;	// 184 = 0xb8
    unsigned long long _lineGestureState;	// 192 = 0xc0
    unsigned long long _lineGestureType;	// 200 = 0xc8
    double _alphaForFingers;	// 208 = 0xd0
    struct CGPoint _startingScreenPointForGestures;	// 216 = 0xd8
    struct CGPoint _pinchFulcrum;	// 232 = 0xe8
    struct CGPoint _endPointForLineGesture;	// 248 = 0xf8
    struct CGPoint _currentHoldPoint;	// 264 = 0x108
}

- (void).cxx_destruct;	// IMP=0x0000000100067368
@property(nonatomic) struct CGPoint currentHoldPoint; // @synthesize currentHoldPoint=_currentHoldPoint;
@property(nonatomic) double alphaForFingers; // @synthesize alphaForFingers=_alphaForFingers;
@property(nonatomic) _Bool shouldAllowFingersForContinuousGesture; // @synthesize shouldAllowFingersForContinuousGesture=_shouldAllowFingersForContinuousGesture;
@property(nonatomic) struct CGPoint endPointForLineGesture; // @synthesize endPointForLineGesture=_endPointForLineGesture;
@property(nonatomic) unsigned long long lineGestureType; // @synthesize lineGestureType=_lineGestureType;
@property(nonatomic) unsigned long long lineGestureState; // @synthesize lineGestureState=_lineGestureState;
@property(nonatomic) double pinchAngle; // @synthesize pinchAngle=_pinchAngle;
@property(nonatomic) double pinchRadius; // @synthesize pinchRadius=_pinchRadius;
@property(nonatomic) struct CGPoint pinchFulcrum; // @synthesize pinchFulcrum=_pinchFulcrum;
@property(retain, nonatomic) NSArray *pinchFingerOriginalPositions; // @synthesize pinchFingerOriginalPositions=_pinchFingerOriginalPositions;
@property(nonatomic) _Bool isPinching; // @synthesize isPinching=_isPinching;
@property(retain, nonatomic) NSArray *panFingerPositions; // @synthesize panFingerPositions=_panFingerPositions;
@property(retain, nonatomic) SCATElementManager *currentSwitchController; // @synthesize currentSwitchController=_currentSwitchController;
@property(retain, nonatomic) SCATGestureArrowView *arrowView; // @synthesize arrowView=_arrowView;
@property(nonatomic) struct CGPoint startingScreenPointForGestures; // @synthesize startingScreenPointForGestures=_startingScreenPointForGestures;
@property(nonatomic, getter=isHidden) _Bool hidden; // @synthesize hidden=_hidden;
@property(nonatomic) __weak id <SCATGestureProviderDelegate> delegate; // @synthesize delegate=_delegate;
- (void)didActivateFingersElement:(id)arg1;	// IMP=0x000000010006712c
- (void)fingersElement:(id)arg1 didBecomeFocused:(_Bool)arg2;	// IMP=0x0000000100067110
- (void)driver:(id)arg1 willUnfocusFromContext:(id)arg2;	// IMP=0x000000010006705c
- (void)driver:(id)arg1 didFocusOnContext:(id)arg2 oldContext:(id)arg3;	// IMP=0x0000000100066f80
- (void)driver:(id)arg1 willFocusOnContext:(id)arg2;	// IMP=0x0000000100066ecc
- (_Bool)handleInputAction:(long long)arg1 withElement:(id)arg2;	// IMP=0x0000000100066e4c
- (_Bool)allowsDwellScanningToAbortAfterTimeout;	// IMP=0x0000000100066e00
- (_Bool)allowsDwellSelection;	// IMP=0x0000000100066db4
- (_Bool)shouldKeepScannerAwake;	// IMP=0x0000000100066d68
- (void)scannerWillMakeManagerInactive:(id)arg1;	// IMP=0x0000000100066cfc
- (void)scannerWillMakeManagerActive:(id)arg1;	// IMP=0x0000000100066c90
- (id)elementBefore:(id)arg1 didWrap:(_Bool *)arg2 options:(int *)arg3;	// IMP=0x0000000100066bf8
- (id)elementAfter:(id)arg1 didWrap:(_Bool *)arg2 options:(int *)arg3;	// IMP=0x0000000100066b60
- (id)lastElementWithOptions:(int *)arg1;	// IMP=0x0000000100066b04
- (id)firstElementWithOptions:(int *)arg1;	// IMP=0x0000000100066aa8
- (_Bool)canBeActiveElementManager;	// IMP=0x0000000100066a98
- (void)_resignSwitchControllerPrivileges;	// IMP=0x0000000100066a48
- (void)_requestSwitchControllerPrivileges;	// IMP=0x00000001000669f4
- (void)drawingViewController:(id)arg1 shouldResetScanningFromElement:(id)arg2;	// IMP=0x000000010006688c
- (void)exitDrawingViewController:(id)arg1;	// IMP=0x000000010006683c
- (_Bool)drawingViewController:(id)arg1 moveFingersToPoints:(id)arg2;	// IMP=0x000000010006679c
- (void)touchUpForDrawingViewController:(id)arg1;	// IMP=0x0000000100066758
- (void)touchDownForDrawingViewController:(id)arg1;	// IMP=0x00000001000666d8
- (_Bool)pointPicker:(id)arg1 pauseForNumberOfCycles:(unsigned long long)arg2;	// IMP=0x00000001000666d0
- (void)pointPickerDidFinishSweeping:(id)arg1;	// IMP=0x00000001000666cc
- (void)pointPicker:(id)arg1 didSweepOutOfFocusContext:(id)arg2 isRefiningPoint:(_Bool)arg3;	// IMP=0x00000001000666c8
- (void)pointPicker:(id)arg1 didSweepIntoFocusContext:(id)arg2 isRefiningPoint:(_Bool)arg3;	// IMP=0x00000001000666c4
- (void)pointPicker:(id)arg1 didPickPoint:(struct CGPoint)arg2;	// IMP=0x00000001000666b8
- (void)menuDidUpdateTipObject:(id)arg1;	// IMP=0x00000001000666ac
- (void)menuDidFinishTransition:(id)arg1;	// IMP=0x0000000100066668
- (void)menuDidDisappear:(id)arg1;	// IMP=0x00000001000665b4
- (void)menuWillDisappear:(id)arg1;	// IMP=0x00000001000665a4
- (void)menuDidAppear:(id)arg1;	// IMP=0x0000000100066510
- (void)menuWillAppear:(id)arg1;	// IMP=0x000000010006647c
- (void)performHoldAtPoint:(struct CGPoint)arg1 isDown:(_Bool)arg2;	// IMP=0x0000000100066210
- (void)replayGesture:(id)arg1;	// IMP=0x0000000100066134
- (id)gesturesSheet;	// IMP=0x00000001000660f4
- (void)performTap;	// IMP=0x00000001000660bc
- (void)performTapAndHold;	// IMP=0x0000000100065f9c
- (void)didChooseCreateInCustomGestureItemsViewController:(id)arg1;	// IMP=0x0000000100065f2c
- (void)didChooseAddRecentInCustomGestureItemsViewController:(id)arg1;	// IMP=0x0000000100065e90
- (void)customGestureItemsViewController:(id)arg1 didChooseGesture:(id)arg2;	// IMP=0x0000000100065cd0
- (id)_repositionedGestureFromOriginalGesture:(id)arg1;	// IMP=0x0000000100065c04
- (id)contextForCustomGestureItemsViewController:(id)arg1;	// IMP=0x0000000100065bac
- (void)fingerItemsViewController:(id)arg1 didChooseNumberOfFingers:(unsigned long long)arg2;	// IMP=0x0000000100065b48
- (void)didCancelGesture:(id)arg1;	// IMP=0x0000000100065b3c
- (void)didRequestRedoGesture:(id)arg1;	// IMP=0x0000000100065b04
- (void)didConfirmGesture:(id)arg1;	// IMP=0x0000000100065ad0
- (id)nameForConfirmationButton:(id)arg1;	// IMP=0x0000000100065a6c
- (struct CGRect)rectToClearForStop:(id)arg1;	// IMP=0x0000000100065a1c
- (void)didChooseStop:(id)arg1;	// IMP=0x00000001000659e8
- (struct CGRect)rectToClearForPinchGesture:(id)arg1;	// IMP=0x00000001000659dc
- (void)willPopPinchItemsViewController:(id)arg1;	// IMP=0x00000001000659d0
- (void)didPushPinchItemsViewController:(id)arg1;	// IMP=0x00000001000659c4
- (void)didChooseRotateCounterclockwise:(id)arg1;	// IMP=0x00000001000659a4
- (void)didChooseRotateClockwise:(id)arg1;	// IMP=0x0000000100065984
- (void)didChoosePinchOut:(id)arg1;	// IMP=0x0000000100065964
- (void)didChoosePinchIn:(id)arg1;	// IMP=0x0000000100065944
- (void)_didChoosePinchItemWithName:(id)arg1 selector:(SEL)arg2;	// IMP=0x00000001000656ac
- (void)didChoosePanDown:(id)arg1;	// IMP=0x000000010006568c
- (void)didChoosePanUp:(id)arg1;	// IMP=0x000000010006566c
- (void)didChoosePanRight:(id)arg1;	// IMP=0x000000010006564c
- (void)didChoosePanLeft:(id)arg1;	// IMP=0x000000010006562c
- (void)_didChoosePanWithName:(id)arg1 selector:(SEL)arg2;	// IMP=0x00000001000654b8
- (void)didChooseForceTouchGesture:(id)arg1;	// IMP=0x0000000100065484
- (void)didChooseArbitraryFlick:(id)arg1;	// IMP=0x0000000100065474
- (void)didChooseFlickRight:(id)arg1;	// IMP=0x0000000100065458
- (void)didChooseFlickLeft:(id)arg1;	// IMP=0x0000000100065438
- (void)didChooseFlickUp:(id)arg1;	// IMP=0x0000000100065418
- (void)didChooseFlickDown:(id)arg1;	// IMP=0x00000001000653f8
- (void)_didChooseFlickWithAngle:(double)arg1 name:(id)arg2;	// IMP=0x00000001000653c4
- (unsigned long long)numberOfFingers;	// IMP=0x00000001000653b4
- (void)didChooseDrawingGesture:(id)arg1;	// IMP=0x00000001000652b4
- (void)didChooseFingers:(id)arg1;	// IMP=0x000000010006521c
- (void)didChooseDoubleTapGesture:(id)arg1;	// IMP=0x00000001000651e4
- (void)didChooseHoldAndDragGesture:(id)arg1;	// IMP=0x00000001000651d4
- (void)didChooseDragGesture:(id)arg1;	// IMP=0x00000001000651c4
- (void)didChoosePinchGesture:(id)arg1;	// IMP=0x000000010006512c
- (void)didChoosePanGesture:(id)arg1;	// IMP=0x0000000100065094
- (void)didChooseFlickGesture:(id)arg1;	// IMP=0x0000000100064ffc
- (void)didChooseFavorites:(id)arg1;	// IMP=0x0000000100064f60
- (void)_startConfirmingLineGestureWithEndpoint:(struct CGPoint)arg1;	// IMP=0x0000000100064d54
- (void)_startPickingEndPointForLineGesture:(unsigned long long)arg1;	// IMP=0x0000000100064b5c
- (id)_promptForLineGesture:(unsigned long long)arg1;	// IMP=0x0000000100064b04
- (void)_clearLineGestureState;	// IMP=0x0000000100064a38
- (struct CGRect)rectToClearForFingersWithGestureSheet:(_Bool)arg1;	// IMP=0x00000001000648f0
- (struct CGRect)_rectToClearForPinchGesture;	// IMP=0x00000001000647d0
- (struct CGRect)_rectForFingers:(id)arg1;	// IMP=0x0000000100064730
- (void)_updateShowsFingers;	// IMP=0x000000010006465c
- (void)_setShowsFingers:(_Bool)arg1;	// IMP=0x00000001000645d4
- (unsigned long long)_numberOfFingers;	// IMP=0x0000000100064590
- (unsigned long long)_numberOfFingersWithGestureSheet:(_Bool)arg1;	// IMP=0x0000000100064524
- (void)_setNumberOfFingersForGestures:(unsigned long long)arg1;	// IMP=0x000000010006446c
- (void)_clearArrowView;	// IMP=0x0000000100064414
- (void)_startTellMeWhenTimerWithSelector:(SEL)arg1 interval:(double)arg2;	// IMP=0x0000000100064320
- (void)_startTellMeWhenTimerWithSelector:(SEL)arg1;	// IMP=0x0000000100064310
- (void)_clearTellMeWhenTimer;	// IMP=0x00000001000642d4
- (void)_updateVisibleFingers;	// IMP=0x0000000100063f70
- (void)_endPinchMode;	// IMP=0x0000000100063ef0
- (void)_startPinchMode;	// IMP=0x0000000100063e08
- (void)_finishLineGesture;	// IMP=0x0000000100063afc
- (void)_panDown;	// IMP=0x0000000100063ae8
- (void)_panUp;	// IMP=0x0000000100063ad4
- (void)_panRight;	// IMP=0x0000000100063ac0
- (void)_panLeft;	// IMP=0x0000000100063aac
- (void)_panByDelta:(struct CGSize)arg1;	// IMP=0x0000000100063860
- (id)_panPositionsAdjustedByDelta:(struct CGSize)arg1;	// IMP=0x0000000100063674
- (void)_rotateCounterclockwise;	// IMP=0x000000010006365c
- (void)_rotateClockwise;	// IMP=0x0000000100063644
- (void)_pinchIn;	// IMP=0x000000010006362c
- (void)_pinchOut;	// IMP=0x0000000100063618
- (void)_updatePinchPositionsWithAttemptedRadiusDelta:(double)arg1 angleDelta:(double)arg2;	// IMP=0x00000001000632dc
- (double)_pinchAngleAdjustedByDelta:(double)arg1;	// IMP=0x0000000100063290
- (double)_pinchRadiusAdjustedByDelta:(double)arg1;	// IMP=0x0000000100063244
- (id)_pinchPositionsWithRadius:(double)arg1 angle:(double)arg2;	// IMP=0x0000000100063108
- (void)_performForceTouchGesture;	// IMP=0x0000000100063064
- (void)_performFlickGestureWithAngle:(double)arg1 name:(id)arg2;	// IMP=0x0000000100062f68
- (void)_performTapGestureForDoubleTap:(_Bool)arg1;	// IMP=0x0000000100062e78
- (void)_performGesture:(id)arg1;	// IMP=0x0000000100062d44
- (void)_saveRecentGesture:(id)arg1;	// IMP=0x0000000100062bec
- (void)_handleCompletedContinuousGesture;	// IMP=0x0000000100062a8c
- (void)_addPointsToContinuousGestureData:(id)arg1;	// IMP=0x00000001000628d4
- (void)_initializeContinuousGestureDataWithName:(id)arg1 points:(id)arg2;	// IMP=0x0000000100062640
- (void)_prepareToBeginContinuousGesture;	// IMP=0x0000000100062618
- (void)_resetContinuousGestureData;	// IMP=0x00000001000625c4
- (_Bool)_isPerformingContinuousGesture;	// IMP=0x00000001000625ac
- (id)_startingPointsAsStrings;	// IMP=0x00000001000624b4
- (struct CGPoint)_startingPointForGestures;	// IMP=0x00000001000623bc
- (void)_updateStartingPointForGesturesWithScreenPoint:(id)arg1;	// IMP=0x00000001000622d8
- (id)_fingerController;	// IMP=0x000000010006227c
- (id)identifier;	// IMP=0x000000010006226c
@property(readonly, nonatomic) id <SCATElement> elementForFingers;
- (void)orientationDidChange:(id)arg1;	// IMP=0x0000000100062010
- (void)dealloc;	// IMP=0x0000000100061f94
- (id)initWithMenu:(id)arg1;	// IMP=0x0000000100061e38

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

