//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "CSAudioAlertProviding-Protocol.h"
#import "CSAudioMeterProviding-Protocol.h"
#import "CSAudioMetricProviding-Protocol.h"
#import "CSAudioPreprocessorDelegate-Protocol.h"
#import "CSAudioRecorderDelegate-Protocol.h"
#import "CSAudioServerCrashMonitorDelegate-Protocol.h"
#import "CSAudioSessionProviding-Protocol.h"
#import "CSAudioStreamProviding-Protocol.h"
#import "CSTriggerInfoProviding-Protocol.h"

@class CSAudioCircularBuffer, CSAudioPreprocessor, CSAudioRecordContext, CSAudioRecorder, CSOSTransaction, NSHashTable, NSMutableArray, NSMutableDictionary, NSString, NSUUID;
@protocol CSAudioAlertProvidingDelegate, CSAudioProviderDelegate, CSAudioSessionProvidingDelegate, OS_dispatch_group, OS_dispatch_queue;

@interface CSAudioProvider : NSObject <CSAudioRecorderDelegate, CSAudioServerCrashMonitorDelegate, CSAudioPreprocessorDelegate, CSAudioStreamProviding, CSAudioSessionProviding, CSAudioMetricProviding, CSAudioAlertProviding, CSAudioMeterProviding, CSTriggerInfoProviding>
{
    _Bool _audioSystemRecovering;	// 8 = 0x8
    _Bool _waitingForAlertFinish;	// 9 = 0x9
    NSString *_UUID;	// 16 = 0x10
    NSObject<OS_dispatch_queue> *_recordQueue;	// 24 = 0x18
    NSObject<OS_dispatch_queue> *_loggingQueue;	// 32 = 0x20
    CSAudioRecorder *_audioRecorder;	// 40 = 0x28
    unsigned long long _streamState;	// 48 = 0x30
    NSHashTable *_startPendingStreams;	// 56 = 0x38
    NSHashTable *_startPendingOnStoppingStreams;	// 64 = 0x40
    NSHashTable *_alertPlaybackFinishWaitingStreams;	// 72 = 0x48
    NSHashTable *_streams;	// 80 = 0x50
    NSHashTable *_stopPendingStreams;	// 88 = 0x58
    NSMutableArray *_pendingStartCompletions;	// 96 = 0x60
    NSMutableArray *_alertPlaybackFinishWaitingCompletions;	// 104 = 0x68
    NSMutableArray *_pendingStopCompletions;	// 112 = 0x70
    NSMutableDictionary *_startPendingOnStoppingStreamToCompletionDict;	// 120 = 0x78
    id <CSAudioProviderDelegate> _providerDelegate;	// 128 = 0x80
    id <CSAudioSessionProvidingDelegate> _sessionDelegate;	// 136 = 0x88
    NSMutableArray *_streamHolders;	// 144 = 0x90
    NSHashTable *_historicalBufferRequestStreams;	// 152 = 0x98
    CSAudioCircularBuffer *_circularBuffer;	// 160 = 0xa0
    id <CSAudioAlertProvidingDelegate> _alertDelegate;	// 168 = 0xa8
    CSAudioRecordContext *_lastAudioRecorderContext;	// 176 = 0xb0
    CSAudioPreprocessor *_audioPreprocessor;	// 184 = 0xb8
    CSOSTransaction *_recordingTransaction;	// 192 = 0xc0
    NSObject<OS_dispatch_group> *_recordingWillStartGroup;	// 200 = 0xc8
    unsigned long long _audioStreamHandleId;	// 208 = 0xd0
    NSUUID *_alertPlaybackFinishTimeoutToken;	// 216 = 0xd8
    NSUUID *_startRecordingWatchDogToken;	// 224 = 0xe0
    NSUUID *_stopRecordingWatchDogToken;	// 232 = 0xe8
    unsigned long long _circularBufferStartHostTime;	// 240 = 0xf0
    unsigned long long _circularBufferStartSampleCount;	// 248 = 0xf8
}

- (void).cxx_destruct;	// IMP=0x0000000100047ce0
@property(nonatomic) unsigned long long circularBufferStartSampleCount; // @synthesize circularBufferStartSampleCount=_circularBufferStartSampleCount;
@property(nonatomic) unsigned long long circularBufferStartHostTime; // @synthesize circularBufferStartHostTime=_circularBufferStartHostTime;
@property(retain, nonatomic) NSUUID *stopRecordingWatchDogToken; // @synthesize stopRecordingWatchDogToken=_stopRecordingWatchDogToken;
@property(retain, nonatomic) NSUUID *startRecordingWatchDogToken; // @synthesize startRecordingWatchDogToken=_startRecordingWatchDogToken;
@property(retain, nonatomic) NSUUID *alertPlaybackFinishTimeoutToken; // @synthesize alertPlaybackFinishTimeoutToken=_alertPlaybackFinishTimeoutToken;
@property(nonatomic) unsigned long long audioStreamHandleId; // @synthesize audioStreamHandleId=_audioStreamHandleId;
@property(nonatomic) _Bool waitingForAlertFinish; // @synthesize waitingForAlertFinish=_waitingForAlertFinish;
@property(retain, nonatomic) NSObject<OS_dispatch_group> *recordingWillStartGroup; // @synthesize recordingWillStartGroup=_recordingWillStartGroup;
@property(retain, nonatomic) CSOSTransaction *recordingTransaction; // @synthesize recordingTransaction=_recordingTransaction;
@property(retain, nonatomic) CSAudioPreprocessor *audioPreprocessor; // @synthesize audioPreprocessor=_audioPreprocessor;
@property(nonatomic) _Bool audioSystemRecovering; // @synthesize audioSystemRecovering=_audioSystemRecovering;
@property(retain, nonatomic) CSAudioRecordContext *lastAudioRecorderContext; // @synthesize lastAudioRecorderContext=_lastAudioRecorderContext;
@property(nonatomic) __weak id <CSAudioAlertProvidingDelegate> alertDelegate; // @synthesize alertDelegate=_alertDelegate;
@property(retain, nonatomic) CSAudioCircularBuffer *circularBuffer; // @synthesize circularBuffer=_circularBuffer;
@property(retain, nonatomic) NSHashTable *historicalBufferRequestStreams; // @synthesize historicalBufferRequestStreams=_historicalBufferRequestStreams;
@property(retain, nonatomic) NSMutableArray *streamHolders; // @synthesize streamHolders=_streamHolders;
@property(nonatomic) __weak id <CSAudioSessionProvidingDelegate> sessionDelegate; // @synthesize sessionDelegate=_sessionDelegate;
@property(nonatomic) __weak id <CSAudioProviderDelegate> providerDelegate; // @synthesize providerDelegate=_providerDelegate;
@property(retain, nonatomic) NSMutableDictionary *startPendingOnStoppingStreamToCompletionDict; // @synthesize startPendingOnStoppingStreamToCompletionDict=_startPendingOnStoppingStreamToCompletionDict;
@property(retain, nonatomic) NSMutableArray *pendingStopCompletions; // @synthesize pendingStopCompletions=_pendingStopCompletions;
@property(retain, nonatomic) NSMutableArray *alertPlaybackFinishWaitingCompletions; // @synthesize alertPlaybackFinishWaitingCompletions=_alertPlaybackFinishWaitingCompletions;
@property(retain, nonatomic) NSMutableArray *pendingStartCompletions; // @synthesize pendingStartCompletions=_pendingStartCompletions;
@property(retain, nonatomic) NSHashTable *stopPendingStreams; // @synthesize stopPendingStreams=_stopPendingStreams;
@property(retain, nonatomic) NSHashTable *streams; // @synthesize streams=_streams;
@property(retain, nonatomic) NSHashTable *alertPlaybackFinishWaitingStreams; // @synthesize alertPlaybackFinishWaitingStreams=_alertPlaybackFinishWaitingStreams;
@property(retain, nonatomic) NSHashTable *startPendingOnStoppingStreams; // @synthesize startPendingOnStoppingStreams=_startPendingOnStoppingStreams;
@property(retain, nonatomic) NSHashTable *startPendingStreams; // @synthesize startPendingStreams=_startPendingStreams;
@property(nonatomic) unsigned long long streamState; // @synthesize streamState=_streamState;
@property(retain, nonatomic) CSAudioRecorder *audioRecorder; // @synthesize audioRecorder=_audioRecorder;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *loggingQueue; // @synthesize loggingQueue=_loggingQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *recordQueue; // @synthesize recordQueue=_recordQueue;
@property(readonly, nonatomic) NSString *UUID; // @synthesize UUID=_UUID;
- (_Bool)_shouldHandleStartPendingOnStopping:(unsigned long long)arg1 withStopReason:(long long)arg2;	// IMP=0x000000010004781c
- (void)_clearDidStopRecordingDelegateWatchDog;	// IMP=0x0000000100047758
- (void)_scheduleDidStopRecordingDelegateWatchDog:(id)arg1;	// IMP=0x00000001000475ac
- (void)_scheduleDidStopRecordingDelegateWatchDog;	// IMP=0x00000001000473c0
- (void)_clearDidStartRecordingDelegateWatchDog;	// IMP=0x00000001000472fc
- (void)_schduleDidStartRecordingDelegateWatchDogWithToken:(id)arg1;	// IMP=0x0000000100047110
- (void)_scheduleDidStartRecordingDelegateWatchDog;	// IMP=0x0000000100046f24
- (void)_holdRecordingExceptionIfNeeded:(_Bool)arg1;	// IMP=0x0000000100046dfc
- (void)_releaseRecordingTransactionIfNeeded;	// IMP=0x0000000100046be8
- (void)_holdRecordingTransactionIfNeeded;	// IMP=0x0000000100046b78
- (id)_streamStateName:(unsigned long long)arg1;	// IMP=0x0000000100046994
- (void)_handleAudioSystemFailure;	// IMP=0x000000010004680c
- (void)CSAudioServerCrashMonitorDidReceiveServerRestart:(id)arg1;	// IMP=0x00000001000466cc
- (void)CSAudioServerCrashMonitorDidReceiveServerCrash:(id)arg1;	// IMP=0x00000001000465ec
- (void)audioRecorderDisconnected:(id)arg1;	// IMP=0x0000000100046518
- (void)audioRecorder:(id)arg1 didSetAudioSessionActive:(_Bool)arg2;	// IMP=0x000000010004646c
- (void)audioRecorder:(id)arg1 willSetAudioSessionActive:(_Bool)arg2;	// IMP=0x00000001000463c0
- (void)audioRecorderEndRecordInterruption:(id)arg1;	// IMP=0x000000010004631c
- (void)audioRecorderBeginRecordInterruption:(id)arg1 withContext:(id)arg2;	// IMP=0x0000000100046270
- (void)audioRecorderBeginRecordInterruption:(id)arg1;	// IMP=0x00000001000461cc
- (void)audioRecorderBuiltInAudioStreamInvalidated:(id)arg1 error:(id)arg2;	// IMP=0x0000000100045f9c
- (void)notifyProviderContextChanged;	// IMP=0x0000000100045e98
- (void)audioRecorderDidFinishAlertPlayback:(id)arg1 ofType:(long long)arg2 error:(id)arg3;	// IMP=0x0000000100045d88
- (void)_didReceiveFinishStartAlertPlaybackAt:(unsigned long long)arg1;	// IMP=0x0000000100045304
- (void)_scheduleAlertFinishTimeout:(double)arg1;	// IMP=0x0000000100045070
- (void)audioRecorderRecordHardwareConfigurationDidChange:(id)arg1 toConfiguration:(long long)arg2;	// IMP=0x0000000100044d44
- (_Bool)isNarrowBand;	// IMP=0x0000000100044c48
- (_Bool)isRecording;	// IMP=0x0000000100044b4c
- (void)audioRecorderBufferAvailable:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 buffer:(id)arg3;	// IMP=0x0000000100044810
- (void)audioRecorderBufferAvailable:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 buffer:(id)arg3 remoteVAD:(id)arg4 atTime:(unsigned long long)arg5;	// IMP=0x0000000100044600
- (void)_processAudioBuffer:(id)arg1 remoteVAD:(id)arg2 atTime:(unsigned long long)arg3;	// IMP=0x0000000100043cc4
- (void)_fetchHistoricalAudioAndForwardToStream:(id)arg1 remoteVAD:(id)arg2;	// IMP=0x00000001000437a8
- (void)audioRecorderWillBeDestroyed:(id)arg1;	// IMP=0x00000001000435f8
- (void)audioRecorderStreamHandleIdInvalidated:(unsigned long long)arg1;	// IMP=0x00000001000433cc
- (void)audioRecorderDidStopRecord:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 reason:(long long)arg3;	// IMP=0x0000000100043344
- (void)audioRecorderDidStartRecord:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 successfully:(_Bool)arg3 error:(id)arg4;	// IMP=0x000000010004322c
- (void)audioPreprocessor:(id)arg1 hasAvailableBuffer:(id)arg2 atTime:(unsigned long long)arg3;	// IMP=0x000000010004317c
- (_Bool)_shouldStopRecording;	// IMP=0x0000000100042ea8
- (_Bool)_isVoiceTriggerInfoAvailableLocally:(id)arg1;	// IMP=0x0000000100042e30
- (void)triggerInfoForContext:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0000000100042b94
- (float)averagePowerForChannel:(unsigned long long)arg1;	// IMP=0x0000000100042b38
- (float)peakPowerForChannel:(unsigned long long)arg1;	// IMP=0x0000000100042adc
- (void)updateMeters;	// IMP=0x0000000100042a9c
- (void)setMeteringEnabled:(_Bool)arg1;	// IMP=0x0000000100042a54
- (id)audioMetric;	// IMP=0x0000000100042a00
- (void)configureAlertBehavior:(id)arg1;	// IMP=0x000000010004292c
- (unsigned long long)alertStartTime;	// IMP=0x00000001000427b8
- (_Bool)playRecordStartingAlertAndResetEndpointer;	// IMP=0x00000001000424e8
- (_Bool)_didPlayStartAlertSoundForSiri:(id)arg1 audioStream:(id)arg2;	// IMP=0x00000001000424cc
- (_Bool)playAlertSoundForType:(long long)arg1;	// IMP=0x0000000100042348
- (_Bool)setAlertSoundFromURL:(id)arg1 forType:(long long)arg2;	// IMP=0x00000001000421ac
- (void)setAudioAlertDelegate:(id)arg1;	// IMP=0x0000000100042114
- (void)enableMiniDucking:(_Bool)arg1;	// IMP=0x000000010004206c
- (void)setDuckOthersOption:(_Bool)arg1;	// IMP=0x0000000100041fc4
- (_Bool)duckOthersOption;	// IMP=0x0000000100041ee0
- (void)enableSmartRoutingConsideration:(_Bool)arg1;	// IMP=0x0000000100041e20
- (_Bool)_deactivateAudioSession:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x0000000100041bd0
- (_Bool)deactivateAudioSession:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x00000001000419c8
- (_Bool)_activateAudioSessionWithReason:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x0000000100041760
- (_Bool)activateAudioSessionWithReason:(unsigned long long)arg1 dynamicAttribute:(unsigned long long)arg2 bundleID:(id)arg3 error:(id *)arg4;	// IMP=0x0000000100041538
- (_Bool)prewarmAudioSessionWithError:(id *)arg1;	// IMP=0x00000001000412f4
- (void)setAudioSessionDelegate:(id)arg1;	// IMP=0x000000010004125c
- (id)playbackRoute;	// IMP=0x0000000100041120
- (id)recordSettings;	// IMP=0x0000000100040fcc
- (id)recordDeviceInfo;	// IMP=0x0000000100040e98
- (id)recordRoute;	// IMP=0x0000000100040d44
- (void)cancelAudioStreamHold:(id)arg1;	// IMP=0x0000000100040958
- (id)holdAudioStreamWithDescription:(id)arg1 timeout:(double)arg2;	// IMP=0x00000001000402d4
- (void)_saveRecordingBufferFrom:(unsigned long long)arg1 to:(unsigned long long)arg2 toURL:(id)arg3;	// IMP=0x0000000100040110
- (void)saveRecordingBufferFrom:(unsigned long long)arg1 to:(unsigned long long)arg2 toURL:(id)arg3;	// IMP=0x0000000100040060
- (void)saveRecordingBufferToEndFrom:(unsigned long long)arg1 toURL:(id)arg2;	// IMP=0x000000010003ff64
- (id)_audioChunkFrom:(unsigned long long)arg1 to:(unsigned long long)arg2 channelIdx:(unsigned long long)arg3;	// IMP=0x000000010003ff34
- (id)_audioChunkFrom:(unsigned long long)arg1 to:(unsigned long long)arg2;	// IMP=0x000000010003ff04
- (id)audioChunkToEndFrom:(unsigned long long)arg1 channelIdx:(unsigned long long)arg2;	// IMP=0x000000010003fdc4
- (id)audioChunkToEndFrom:(unsigned long long)arg1;	// IMP=0x000000010003fc88
- (id)audioChunkFrom:(unsigned long long)arg1 to:(unsigned long long)arg2;	// IMP=0x000000010003fb84
- (void)_stopAudioStream:(id)arg1 option:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000010003ece0
- (void)stopAudioStream:(id)arg1 option:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000010003ebcc
- (void)_handleDidStopAudioStreamWithReason:(long long)arg1;	// IMP=0x000000010003e2d8
- (void)_postEpilogueAudioStream;	// IMP=0x000000010003e280
- (void)_preEpilogueAudioStream;	// IMP=0x000000010003e270
- (void)_handleDidStartAudioStreamWithResult:(_Bool)arg1 error:(id)arg2;	// IMP=0x000000010003de78
- (void)_resetCircularBufferStartTime;	// IMP=0x000000010003de3c
- (void)_switchToListeningMode;	// IMP=0x000000010003dd78
- (void)_switchToRecordingMode;	// IMP=0x000000010003dcb4
- (void)_startAudioStream:(id)arg1 option:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000010003cb14
- (void)prepareAudioStream:(id)arg1 request:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000010003c84c
- (_Bool)prepareAudioStreamSync:(id)arg1 request:(id)arg2 error:(id *)arg3;	// IMP=0x000000010003c544
- (void)startAudioStream:(id)arg1 option:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000010003bfc0
- (void)_tearDownCircularBufferIfNeeded;	// IMP=0x000000010003be80
- (void)_createCircularBufferIfNeeded;	// IMP=0x000000010003bd00
- (void)_prepareAudioStream:(id)arg1 request:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000010003bbc8
- (_Bool)_prepareAudioStreamSync:(id)arg1 request:(id)arg2 error:(id *)arg3;	// IMP=0x000000010003b6ec
- (void)audioStreamWithRequest:(id)arg1 streamName:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000010003b4cc
- (id)audioStreamWithRequest:(id)arg1 streamName:(id)arg2 error:(id *)arg3;	// IMP=0x000000010003b23c
- (id)_audioStreamWithRequest:(id)arg1 streamName:(id)arg2 error:(id *)arg3;	// IMP=0x000000010003afbc
- (_Bool)setCurrentContext:(id)arg1 error:(id *)arg2;	// IMP=0x000000010003aa5c
- (void)setAudioProviderDelegate:(id)arg1;	// IMP=0x000000010003a9c4
- (void)start;	// IMP=0x000000010003a65c
- (void)dealloc;	// IMP=0x000000010003a588
- (id)initWithAudioStreamHandleId:(unsigned long long)arg1 audioRecorder:(id)arg2;	// IMP=0x000000010003a244

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

