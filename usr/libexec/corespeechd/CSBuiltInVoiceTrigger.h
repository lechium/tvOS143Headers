//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "CSActivationEventNotificationHandlerDelegate-Protocol.h"
#import "CSAudioRouteChangeMonitorDelegate-Protocol.h"
#import "CSAudioServerCrashMonitorDelegate-Protocol.h"
#import "CSAudioStreamProvidingDelegate-Protocol.h"
#import "CSBluetoothWirelessSplitterMonitorDelegate-Protocol.h"
#import "CSKeywordAnalyzerNDAPIScoreDelegate-Protocol.h"
#import "CSSelfTriggerDetectorDelegate-Protocol.h"
#import "CSSiriClientBehaviorMonitorDelegate-Protocol.h"
#import "CSStateMachineDelegate-Protocol.h"
#import "CSVoiceTriggerXPCServiceProxyDelegate-Protocol.h"

@class CSAsset, CSAudioProvider, CSAudioStream, CSKeywordAnalyzerNDAPIResult, CSOSTransaction, CSPolicy, CSStateMachine, CSVoiceTriggerAlwaysOnProcessor, CSVoiceTriggerSecondPass, NSDictionary, NSMutableArray, NSString;
@protocol CSVoiceTriggerDelegate, OS_dispatch_group, OS_dispatch_queue, OS_dispatch_source;

@interface CSBuiltInVoiceTrigger : NSObject <CSKeywordAnalyzerNDAPIScoreDelegate, CSActivationEventNotificationHandlerDelegate, CSAudioStreamProvidingDelegate, CSSiriClientBehaviorMonitorDelegate, CSAudioServerCrashMonitorDelegate, CSVoiceTriggerXPCServiceProxyDelegate, CSStateMachineDelegate, CSBluetoothWirelessSplitterMonitorDelegate, CSAudioRouteChangeMonitorDelegate, CSSelfTriggerDetectorDelegate>
{
    _Bool _voiceTriggerEnabled;	// 8 = 0x8
    _Bool _hasTriggerPending;	// 9 = 0x9
    _Bool _isSecondPassRunning;	// 10 = 0xa
    _Bool _isSiriClientListening;	// 11 = 0xb
    _Bool _isListenPollingStarting;	// 12 = 0xc
    _Bool _isPhraseSpotterBypassed;	// 13 = 0xd
    _Bool _isExternalPhraseSpotterRunning;	// 14 = 0xe
    _Bool _shouldDisableOnSpeakerVerificationInSplitterMode;	// 15 = 0xf
    _Bool _firstTimeAssetConfigured;	// 16 = 0x10
    float _firstPassThreshold;	// 20 = 0x14
    float _bestScore;	// 24 = 0x18
    float _masterChannelScoreBoost;	// 28 = 0x1c
    id <CSVoiceTriggerDelegate> _delegate;	// 32 = 0x20
    CSPolicy *_voiceTriggerStartPolicy;	// 40 = 0x28
    CSAudioStream *_audioStream;	// 48 = 0x30
    NSObject<OS_dispatch_queue> *_queue;	// 56 = 0x38
    CSAsset *_currentAsset;	// 64 = 0x40
    NSMutableArray *_keywordAnalyzersNDAPI;	// 72 = 0x48
    unsigned long long _bestChannel;	// 80 = 0x50
    CSKeywordAnalyzerNDAPIResult *_onsetResult;	// 88 = 0x58
    unsigned long long _onsetChannel;	// 96 = 0x60
    unsigned long long _channelSelectionDelay;	// 104 = 0x68
    unsigned long long _delayInSamplesRequiredForChannelSelection;	// 112 = 0x70
    NSDictionary *_channelSelectionScores;	// 120 = 0x78
    unsigned long long _processingChunkSamples;	// 128 = 0x80
    unsigned long long _processingChannelsBitset;	// 136 = 0x88
    CSVoiceTriggerSecondPass *_voiceTriggerSecondPass;	// 144 = 0x90
    CSAudioProvider *_audioProvider;	// 152 = 0x98
    NSMutableArray *_audioStreamHoldings;	// 160 = 0xa0
    CSOSTransaction *_secondPassTransaction;	// 168 = 0xa8
    CSPolicy *_voiceTriggerAOPModeStartPolicy;	// 176 = 0xb0
    CSStateMachine *_stateMachine;	// 184 = 0xb8
    CSVoiceTriggerAlwaysOnProcessor *_alwaysOnProcessorController;	// 192 = 0xc0
    NSObject<OS_dispatch_group> *_recordingWillStartGroup;	// 200 = 0xc8
    unsigned long long _secondChanceHotTillMachTime;	// 208 = 0xd0
    unsigned long long _currentSplitterState;	// 216 = 0xd8
    NSString *_name;	// 224 = 0xe0
    NSMutableArray *_assetConfigWaitingBuffer;	// 232 = 0xe8
    NSObject<OS_dispatch_source> *_validationTimer;	// 240 = 0xf0
}

- (void).cxx_destruct;	// IMP=0x00000001000d7620
@property(retain, nonatomic) NSObject<OS_dispatch_source> *validationTimer; // @synthesize validationTimer=_validationTimer;
@property(retain, nonatomic) NSMutableArray *assetConfigWaitingBuffer; // @synthesize assetConfigWaitingBuffer=_assetConfigWaitingBuffer;
@property(nonatomic) _Bool firstTimeAssetConfigured; // @synthesize firstTimeAssetConfigured=_firstTimeAssetConfigured;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
@property(nonatomic) _Bool shouldDisableOnSpeakerVerificationInSplitterMode; // @synthesize shouldDisableOnSpeakerVerificationInSplitterMode=_shouldDisableOnSpeakerVerificationInSplitterMode;
@property(nonatomic) unsigned long long currentSplitterState; // @synthesize currentSplitterState=_currentSplitterState;
@property(nonatomic) unsigned long long secondChanceHotTillMachTime; // @synthesize secondChanceHotTillMachTime=_secondChanceHotTillMachTime;
@property(retain, nonatomic) NSObject<OS_dispatch_group> *recordingWillStartGroup; // @synthesize recordingWillStartGroup=_recordingWillStartGroup;
@property(retain, nonatomic) CSVoiceTriggerAlwaysOnProcessor *alwaysOnProcessorController; // @synthesize alwaysOnProcessorController=_alwaysOnProcessorController;
@property(retain, nonatomic) CSStateMachine *stateMachine; // @synthesize stateMachine=_stateMachine;
@property(retain, nonatomic) CSPolicy *voiceTriggerAOPModeStartPolicy; // @synthesize voiceTriggerAOPModeStartPolicy=_voiceTriggerAOPModeStartPolicy;
@property(nonatomic) _Bool isExternalPhraseSpotterRunning; // @synthesize isExternalPhraseSpotterRunning=_isExternalPhraseSpotterRunning;
@property(nonatomic) _Bool isPhraseSpotterBypassed; // @synthesize isPhraseSpotterBypassed=_isPhraseSpotterBypassed;
@property(retain, nonatomic) CSOSTransaction *secondPassTransaction; // @synthesize secondPassTransaction=_secondPassTransaction;
@property(retain, nonatomic) NSMutableArray *audioStreamHoldings; // @synthesize audioStreamHoldings=_audioStreamHoldings;
@property(retain, nonatomic) CSAudioProvider *audioProvider; // @synthesize audioProvider=_audioProvider;
@property(nonatomic) _Bool isListenPollingStarting; // @synthesize isListenPollingStarting=_isListenPollingStarting;
@property(nonatomic) _Bool isSiriClientListening; // @synthesize isSiriClientListening=_isSiriClientListening;
@property(nonatomic) _Bool isSecondPassRunning; // @synthesize isSecondPassRunning=_isSecondPassRunning;
@property(retain, nonatomic) CSVoiceTriggerSecondPass *voiceTriggerSecondPass; // @synthesize voiceTriggerSecondPass=_voiceTriggerSecondPass;
@property(nonatomic) unsigned long long processingChannelsBitset; // @synthesize processingChannelsBitset=_processingChannelsBitset;
@property(nonatomic) unsigned long long processingChunkSamples; // @synthesize processingChunkSamples=_processingChunkSamples;
@property(retain, nonatomic) NSDictionary *channelSelectionScores; // @synthesize channelSelectionScores=_channelSelectionScores;
@property(nonatomic) float masterChannelScoreBoost; // @synthesize masterChannelScoreBoost=_masterChannelScoreBoost;
@property(nonatomic) unsigned long long delayInSamplesRequiredForChannelSelection; // @synthesize delayInSamplesRequiredForChannelSelection=_delayInSamplesRequiredForChannelSelection;
@property(nonatomic) unsigned long long channelSelectionDelay; // @synthesize channelSelectionDelay=_channelSelectionDelay;
@property(nonatomic) unsigned long long onsetChannel; // @synthesize onsetChannel=_onsetChannel;
@property(retain, nonatomic) CSKeywordAnalyzerNDAPIResult *onsetResult; // @synthesize onsetResult=_onsetResult;
@property(nonatomic) unsigned long long bestChannel; // @synthesize bestChannel=_bestChannel;
@property(nonatomic) float bestScore; // @synthesize bestScore=_bestScore;
@property(nonatomic) float firstPassThreshold; // @synthesize firstPassThreshold=_firstPassThreshold;
@property(nonatomic) _Bool hasTriggerPending; // @synthesize hasTriggerPending=_hasTriggerPending;
@property(retain, nonatomic) NSMutableArray *keywordAnalyzersNDAPI; // @synthesize keywordAnalyzersNDAPI=_keywordAnalyzersNDAPI;
@property(retain, nonatomic) CSAsset *currentAsset; // @synthesize currentAsset=_currentAsset;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(nonatomic) _Bool voiceTriggerEnabled; // @synthesize voiceTriggerEnabled=_voiceTriggerEnabled;
@property(retain, nonatomic) CSAudioStream *audioStream; // @synthesize audioStream=_audioStream;
@property(retain, nonatomic) CSPolicy *voiceTriggerStartPolicy; // @synthesize voiceTriggerStartPolicy=_voiceTriggerStartPolicy;
@property(nonatomic) __weak id <CSVoiceTriggerDelegate> delegate; // @synthesize delegate=_delegate;
- (id)_eventName:(unsigned long long)arg1;	// IMP=0x00000001000d7180
- (id)_stateName:(unsigned long long)arg1;	// IMP=0x00000001000d6fc4
- (void)didIgnoreEvent:(long long)arg1 from:(long long)arg2;	// IMP=0x00000001000d6e88
- (void)didTransitFrom:(long long)arg1 to:(long long)arg2 by:(long long)arg3;	// IMP=0x00000001000d6bb8
- (void)_receivedHearstConnectionEvent:(_Bool)arg1;	// IMP=0x00000001000d6adc
- (void)CSAudioRouteChangeMonitor:(id)arg1 didReceiveAudioRouteChangeEvent:(long long)arg2;	// IMP=0x00000001000d69a0
- (void)_updateCurrentSplitterState:(unsigned long long)arg1 shouldDisableSpeakerVerificationInSplitterMode:(_Bool)arg2;	// IMP=0x00000001000d68b4
- (void)CSBluetoothWirelessSplitterMonitor:(id)arg1 didReceiveSplitterStateChange:(unsigned long long)arg2 shouldDisableSpeakerVerificationInSplitterMode:(_Bool)arg3;	// IMP=0x00000001000d6840
- (unsigned long long)_currentState;	// IMP=0x00000001000d6830
- (void)_setupStateMachine;	// IMP=0x00000001000d66e0
- (void)_notifyEvent:(unsigned long long)arg1;	// IMP=0x00000001000d65cc
- (void)_teardownSecondPassIfNeeded;	// IMP=0x00000001000d6570
- (void)_createSecondPassIfNeededWithFirstPassSource:(unsigned long long)arg1;	// IMP=0x00000001000d62e8
- (_Bool)_shouldSecondPassKeepAlive;	// IMP=0x00000001000d62c4
- (void)_cancelAllAudioStreamHold;	// IMP=0x00000001000d616c
- (void)_cancelLastAudioStreamHold;	// IMP=0x00000001000d60c0
- (void)_addAudioStreamHold:(id)arg1;	// IMP=0x00000001000d606c
- (void)activationEventNotificationHandler:(id)arg1 event:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x00000001000d5c98
- (void)CSVoiceTriggerXPCServiceProxy:(id)arg1 bypassRaiseToSpeak:(_Bool)arg2;	// IMP=0x00000001000d5c94
- (void)CSVoiceTriggerXPCServiceProxy:(id)arg1 bypassPhraseSpotter:(_Bool)arg2;	// IMP=0x00000001000d5c28
- (void)CSAudioServerCrashMonitorDidReceiveServerRestart:(id)arg1;	// IMP=0x00000001000d5ad4
- (void)CSAudioServerCrashMonitorDidReceiveServerCrash:(id)arg1;	// IMP=0x00000001000d5978
- (void)selfTriggerDetector:(id)arg1 didDetectSelfTrigger:(id)arg2;	// IMP=0x00000001000d58a8
- (void)siriClientBehaviorMonitor:(id)arg1 willStopStream:(id)arg2;	// IMP=0x00000001000d57a0
- (void)siriClientBehaviorMonitor:(id)arg1 willStartStreamWithContext:(id)arg2 option:(id)arg3;	// IMP=0x00000001000d579c
- (void)siriClientBehaviorMonitor:(id)arg1 didStopStream:(id)arg2 withEventUUID:(id)arg3;	// IMP=0x00000001000d5684
- (void)siriClientBehaviorMonitor:(id)arg1 didStartStreamWithContext:(id)arg2 successfully:(_Bool)arg3 option:(id)arg4 withEventUUID:(id)arg5;	// IMP=0x00000001000d5564
- (void)_handleSecondPassResult:(unsigned long long)arg1 voiceTriggerInfo:(id)arg2 deviceId:(id)arg3 secondChanceCandidate:(_Bool)arg4 error:(id)arg5;	// IMP=0x00000001000d507c
- (void)_handleVoiceTriggerSecondPassWithSource:(unsigned long long)arg1 deviceId:(id)arg2 audioProviderUUID:(id)arg3 firstPassInfo:(id)arg4;	// IMP=0x00000001000d4b94
- (void)_reportVoiceTriggerFirstPassFireFromAP;	// IMP=0x00000001000d4820
- (void)_keywordAnalyzerNDAPI:(id)arg1 hasResultAvailable:(id)arg2 forChannel:(unsigned long long)arg3;	// IMP=0x00000001000d41e4
- (void)keywordAnalyzerNDAPI:(id)arg1 hasMpVtResultsAvailable:(id)arg2 forChannel:(unsigned long long)arg3;	// IMP=0x00000001000d403c
- (void)keywordAnalyzerNDAPI:(id)arg1 hasResultAvailable:(id)arg2 forChannel:(unsigned long long)arg3;	// IMP=0x00000001000d3fe4
- (void)audioStreamProvider:(id)arg1 audioChunkForTVAvailable:(id)arg2;	// IMP=0x00000001000d3fe0
- (void)_handleAudioChunk:(id)arg1;	// IMP=0x00000001000d3ba8
- (void)audioStreamProvider:(id)arg1 audioBufferAvailable:(id)arg2;	// IMP=0x00000001000d396c
- (void)audioStreamProvider:(id)arg1 didStopStreamUnexpectly:(long long)arg2;	// IMP=0x00000001000d3868
- (void)_stopAOPVoiceTrigger;	// IMP=0x00000001000d37a4
- (void)_stopAPVoiceTrigger;	// IMP=0x00000001000d3480
- (_Bool)_isVoiceTriggerStateTransitionEvent:(id)arg1;	// IMP=0x00000001000d33e0
- (_Bool)_isBuiltInAOPVoiceTriggerEvent:(id)arg1;	// IMP=0x00000001000d3340
- (_Bool)_shouldHandleAOPVoiceTrigger;	// IMP=0x00000001000d3030
- (_Bool)_shouldEnableAPVoiceTrigger;	// IMP=0x00000001000d2fe8
- (_Bool)_shouldEnableAOPVoiceTrigger;	// IMP=0x00000001000d2fa4
- (void)_startAOPVoiceTrigger;	// IMP=0x00000001000d2ed4
- (void)_APModeValidationTimerFired;	// IMP=0x00000001000d2c7c
- (void)_startAPVoiceTriggerWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000001000d2a7c
- (void)_startVoiceTriggerWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000001000d285c
- (void)_stopListening;	// IMP=0x00000001000d2614
- (_Bool)_shouldReuseBuiltInAudioProvider;	// IMP=0x00000001000d25fc
- (void)_requestStartAudioStreamWithSource:(unsigned long long)arg1 context:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x00000001000d2280
- (void)_startListenWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000001000d1c8c
- (void)_startListenPollingWithInterval:(double)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000001000d18a4
- (void)_transitAOPMode:(_Bool)arg1;	// IMP=0x00000001000d17dc
- (void)_transitAOPModeSync:(_Bool)arg1;	// IMP=0x00000001000d1768
- (void)_transitAOPModeAsync:(_Bool)arg1;	// IMP=0x00000001000d16f4
- (void)_transitVoiceTriggerStatus:(_Bool)arg1 force:(_Bool)arg2;	// IMP=0x00000001000d141c
- (void)_setAsset:(id)arg1;	// IMP=0x00000001000d0f44
- (void)setAsset:(id)arg1;	// IMP=0x00000001000d0e0c
- (void)_reset;	// IMP=0x00000001000d0cb4
- (void)reset;	// IMP=0x00000001000d0c4c
- (void)start;	// IMP=0x00000001000d0488
- (id)initWithTargetQueue:(id)arg1;	// IMP=0x00000001000d01e4

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

