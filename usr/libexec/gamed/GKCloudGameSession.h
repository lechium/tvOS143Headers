//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "NSSecureCoding-Protocol.h"

@class CKRecord, GKCloudPlayer, NSArray, NSData, NSDate, NSDictionary, NSMutableDictionary, NSString, NSURL;

@interface GKCloudGameSession : NSObject <NSSecureCoding>
{
    CKRecord *_record;	// 8 = 0x8
    NSDictionary *_playersByIdentifier;	// 16 = 0x10
    GKCloudPlayer *_owner;	// 24 = 0x18
    NSURL *_url;	// 32 = 0x20
}

+ (void)badgeCountForContainerName:(id)arg1 useCacheDirectly:(_Bool)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x0000000100121510
+ (void)updateBadgeCountsForContainerName:(id)arg1 useCacheDirectly:(_Bool)arg2;	// IMP=0x0000000100121154
+ (void)updateBadgeCountsForContainerName:(id)arg1;	// IMP=0x0000000100121144
+ (void)deleteInviteRecordWithRecordID:(id)arg1 fromDatabase:(id)arg2;	// IMP=0x0000000100120de8
+ (void)searchAndSaveIdentityForRecord:(id)arg1 database:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000100120de4
+ (void)saveInviteRecord:(id)arg1 database:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000100120458
+ (void)getAssociatedAccountsWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000100120454
+ (id)msgServiceQueue;	// IMP=0x00000001001203e4
+ (void)generateAndStoreInviteBulletinForRecord:(id)arg1 database:(id)arg2;	// IMP=0x000000010011f80c
+ (id)packFakeTurnBasedBulletinWithZoneData:(id)arg1;	// IMP=0x000000010011f334
+ (id)packFakeRealTimeBulletinWithZoneData:(id)arg1;	// IMP=0x000000010011e7f0
+ (void)reportPlayerStateChangesToClients:(id)arg1 forUpdatedSession:(id)arg2 oldSession:(id)arg3;	// IMP=0x000000010011d59c
+ (void)openStoreForBundleID:(id)arg1;	// IMP=0x000000010011bfd4
+ (void)launchOrOpenAppStoreForBundleID:(id)arg1;	// IMP=0x000000010011bf7c
+ (void)acceptShareMetadata:(id)arg1 retryCount:(int)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x000000010011b7f0
+ (void)showAcceptAlertWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010011b630
+ (void)handleLegacyShareMetadata:(id)arg1 needsAccept:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x000000010011ab08
+ (void)handleSessionShareMetadata:(id)arg1 needsAccept:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x000000010011a2a4
+ (void)handleCloudKitShareMetadata:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100119a9c
+ (void)acceptShareURL:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x000000010011970c
+ (void)saveInformationForPrimaryUserForSessionWithShareMetadata:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100118de4
+ (void)fetchShareMetadataForURL:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100118930
+ (void)fetchShareRecordsWithRecordIDs:(id)arg1 inDatabase:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x000000010011880c
+ (id)cloudKitOperationConfigurationForSocialGamingSessionsContainer;	// IMP=0x0000000100117620
+ (id)cloudKitOperationConfigurationForContainer:(id)arg1;	// IMP=0x0000000100117590
+ (void)subscribeToAllDBwithHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000100117068
+ (void)getZoneNamesWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000100116a78
+ (void)createZoneWithName:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100116868
+ (void)bundleIDsForContainerName:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x000000010011564c
+ (void)removeSessionWithIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100114de8
+ (void)createSessionWithContainerName:(id)arg1 title:(id)arg2 maxConnectedPlayers:(long long)arg3 handler:(CDUnknownBlockType)arg4;	// IMP=0x00000001001141a8
+ (_Bool)isCloudDriveEnabledForBundleID:(id)arg1;	// IMP=0x0000000100113f0c
+ (id)databaseForZoneID:(id)arg1;	// IMP=0x0000000100113ebc
+ (id)databaseForSession:(id)arg1;	// IMP=0x0000000100113e68
+ (id)sharedDatabase;	// IMP=0x0000000100113e04
+ (id)privateDatabase;	// IMP=0x0000000100113da0
+ (_Bool)isOwnZoneID:(id)arg1;	// IMP=0x0000000100113c70
+ (_Bool)isOwnRecordID:(id)arg1;	// IMP=0x0000000100113c14
+ (id)recordIDForSessionIdentifier:(id)arg1;	// IMP=0x00000001001139d0
+ (id)sessionIdentifierForRecordID:(id)arg1;	// IMP=0x00000001001137d0
+ (id)allowedCharacterSet;	// IMP=0x00000001001136fc
+ (void)getFriendPlayersWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000001001130d8
+ (void)updateFriendRecordIfNeeded;	// IMP=0x0000000100112978
+ (void)updateFriendsWithRecord:(id)arg1;	// IMP=0x0000000100112488
+ (void)updateCacheForFriendZoneID:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100111e88
+ (void)updatePlayersForSessions:(id)arg1 sharesByRecordID:(id)arg2 inDatabase:(id)arg3 handler:(CDUnknownBlockType)arg4;	// IMP=0x0000000100110ea8
+ (void)primaryPlayerWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000100110ddc
+ (id)playerIdentifierForUserRecordName:(id)arg1;	// IMP=0x0000000100110d18
+ (id)localPlayerAlias;	// IMP=0x0000000100110a78
+ (void)determinePlayerChangesIn:(id)arg1 newSession:(id)arg2 notifyClients:(id)arg3;	// IMP=0x0000000100110440
+ (void)reportChangesForSessions:(id)arg1 shareChangedSessions:(id)arg2 removedSessions:(id)arg3 zoneID:(id)arg4 handler:(CDUnknownBlockType)arg5;	// IMP=0x000000010010f78c
+ (id)allChangedSessionsFromRecordChangedSessions:(id)arg1 shareChangedSessions:(id)arg2;	// IMP=0x000000010010f3f0
+ (void)updateCacheForDatabase:(id)arg1 zoneIDs:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x000000010010db8c
+ (void)updateCacheForDatabaseScope:(long long)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x000000010010c700
+ (void)updateCacheForZoneID:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x000000010010c318
+ (void)updateSessionCacheDatabasesWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010010bf60
+ (void)updateSessionCacheWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010010bae4
+ (void)updateUserWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010010ba78
+ (void)fetchUserRecordIDWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010010ba00
+ (id)friendEmailsByID;	// IMP=0x000000010010b9ac
+ (void)sessionForShareMetadata:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x000000010010b8f8
+ (void)sessionsForContainerName:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x000000010010b52c
+ (void)sessionForIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x000000010010b16c
+ (id)cacheQueue;	// IMP=0x000000010010b0fc
+ (id)sessionCache;	// IMP=0x000000010010b090
+ (id)AES128Operation:(unsigned int)arg1 key:(id)arg2 data:(id)arg3;	// IMP=0x000000010010af28
+ (id)AES128DecryptedVersionOfData:(id)arg1 withKey:(id)arg2;	// IMP=0x000000010010aec0
+ (id)AES128EncryptedVersionOfData:(id)arg1 withKey:(id)arg2;	// IMP=0x000000010010ae58
+ (id)playerIdentifierForObfuscatedIdentifier:(id)arg1 containerName:(id)arg2;	// IMP=0x000000010010ad5c
+ (id)obfuscatedIdentifierForPlayerIdentifier:(id)arg1 containerName:(id)arg2;	// IMP=0x000000010010ac64
+ (id)mutablePlistFromPlayerStatesData:(id)arg1 error:(id *)arg2;	// IMP=0x0000000100109f20
+ (_Bool)supportsSecureCoding;	// IMP=0x0000000100109330
- (void).cxx_destruct;	// IMP=0x00000001001225c0
@property(retain, nonatomic) NSURL *url; // @synthesize url=_url;
@property(retain, nonatomic) GKCloudPlayer *owner; // @synthesize owner=_owner;
@property(retain, nonatomic) NSDictionary *playersByIdentifier; // @synthesize playersByIdentifier=_playersByIdentifier;
@property(retain, nonatomic) CKRecord *record; // @synthesize record=_record;
- (void)setBadged:(_Bool)arg1 forPlayerIDs:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x0000000100121cf0
- (void)saveConnectionState:(long long)arg1 forPlayerWithID:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x000000010011df40
- (void)tempEmailFixForPlayerID:(id)arg1;	// IMP=0x000000010011ddac
@property(readonly, nonatomic) NSArray *connectedPlayerIDs;
- (void)removePlayers:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x000000010011ca9c
- (void)deleteShareWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010011c6d8
- (void)fetchShareRecordWithRecordID:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00000001001185f4
- (void)saveShare:(id)arg1 isNewShare:(_Bool)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x00000001001181c8
- (void)setupShareWithRecordID:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100117efc
- (void)getShareURLWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010011770c
- (void)saveWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000100116548
- (void)saveData:(id)arg1 changeTag:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x0000000100115c74
@property(readonly, nonatomic) NSString *containerName;
- (id)playersForGKGameSession;	// IMP=0x0000000100111b4c
- (id)players;	// IMP=0x0000000100111af8
- (void)setPlayers:(id)arg1;	// IMP=0x0000000100111944
- (void)updatePlayersWithIdentities:(id)arg1;	// IMP=0x00000001001116a8
- (id)createGKGameSession;	// IMP=0x000000010010a5ec
@property(retain, nonatomic) NSMutableDictionary *nicknamesByIdentifier; // @dynamic nicknamesByIdentifier;
@property(retain, nonatomic) NSMutableDictionary *emailsByCKID;
@property(readonly, nonatomic) NSDictionary *playersByEmail;
- (id)playerStates;	// IMP=0x0000000100109f74
- (void)setPlayerStates:(id)arg1;	// IMP=0x0000000100109eac
@property(readonly, nonatomic) NSString *serverChangeTag;
@property(readonly, nonatomic) GKCloudPlayer *lastModifiedPlayer;
@property(readonly, nonatomic) NSDate *lastModifiedDate;
@property(retain, nonatomic) NSData *data;
@property(nonatomic) long long maxConnectedPlayers;
@property(retain, nonatomic) NSString *title;
@property(readonly, nonatomic) NSString *identifier;
- (_Bool)isOwnedByUser;	// IMP=0x000000010010983c
- (id)description;	// IMP=0x00000001001096f4
- (void)encodeWithCoder:(id)arg1;	// IMP=0x0000000100109600
- (id)initWithCoder:(id)arg1;	// IMP=0x0000000100109338
- (id)initWithRecord:(id)arg1;	// IMP=0x00000001001092bc
- (id)initWithContainerName:(id)arg1;	// IMP=0x0000000100109200

@end

